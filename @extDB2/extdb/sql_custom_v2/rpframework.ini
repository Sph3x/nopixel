[Default]
Version = 10

Number of Inputs = 0

;;Sanitize Checks are better than Strip Characters, but only accept ASCII Characters
;;Requires abit more work to setup correctly.
Sanitize Input Value Check = false
Sanitize Output Value Check = false 

;;Allows you to disable Prepared Statement Caching.
;;Mainly for people that don't want to waste memory on caching a Statement that is only once. 
Prepared Statement Cache = true

;;Returns InsertID, Instead of returning [1,[]] It returns [1,[<INSERTID>,[]]]
Return InsertID = false

;;Strip Characters
Strip = true
;;Possible Actions Are "Strip" / "Strip+Log" / "Strip+Error" / "None"
Strip Chars Action = STRIP
Strip Chars = /\|;{}<>'`
;;Strip Chars Used for $CUSTOM_x$ Inputs
Strip Custom Chars = /\|;{}<>'`


; --------------------------------------------------------------------------------
; SQL Statements
; --------------------------------------------------------------------------------

[existPlayerInfo]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT * FROM users WHERE uid = ?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
Number of Inputs = 1

[existLicense]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT * FROM garage WHERE license = ?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1
Number of Inputs = 1

;;Gonna Make Phone Numbers #FuckYouKoil


[insertPlayerInfo]
SQL1_1 = INSERT INTO users (uid, name, items, cash, bank, cop, ems, position, phoneBackground, messages, statuses, houselevel, housecontent, shopcontent, shopname, mafia, fire, legal, prison, prisonreason) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
Number of Inputs = 20

[updatePlayerInfo]
;; Name of call == updatePlayerInfo
SQL1_1 = UPDATE users SET items=?, cash=?, bank=?, position=?,messages=?, statuses=?, housecontent=?, shopcontent=?, phoneBackground=?, houselevel=? WHERE uid=?
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
Number of Inputs = 11

[updatePlayerInfoNoGear]
;; Name of call == updatePlayerInfoNoGear
SQL1_1 = UPDATE users SET cash=?, bank=?, position=?,messages=?, statuses=?, housecontent=?, shopcontent=?, phoneBackground=?,houselevel=? WHERE uid=?
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
Number of Inputs = 10


[playerInfo]
SQL1_1 = SELECT items, cash, bank, cop, ems, position, bankaccount, phoneBackground, messages, statuses, houselevel, housecontent, shopcontent, shopname, mafia, fire, legal, prison, prisonreason FROM users WHERE uid=?
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1,2,3,4,5,6,7,8,9,10,11,12,13,14-String,15,16,17,18,19-String

[insertGarage]
SQL1_1 = INSERT INTO garage (license, class, color, finish, rims, windows, lights, owner,statuses) VALUE (?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9
Number of Inputs = 9


[getLicense]
SQL1_1 = SELECT license, class, color, owner FROM garage WHERE license=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String,3-String,4-String

[getGarage]
SQL1_1 = SELECT license, class, color, finish, rims, windows, lights,statuses, owner FROM garage WHERE owner=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String,3-String,4-String,5-String, 6, 7, 8, 9-String

[deleteGarage]
SQL_1 = DELETE FROM garage WHERE license=?
SQL1_INPUTS = 1
Number of Inputs = 1

[updateHouse]
SQL_1 = UPDATE users SET housecontent=? WHERE uid=?
SQL1_INPUTS = 1, 2
Number of Inputs = 2


[updateCarStatus]
SQL1_1 = UPDATE garage SET statuses=? WHERE license=?
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[updateVehClass]
SQL1_1 = UPDATE garage SET class=? WHERE license=?
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[insertMail]
SQL1_1 = INSERT INTO mail (message, title, sender, receiver) VALUES (?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4
Number of Inputs = 4

[getMail]
SQL1_1 = SELECT message, title, sender FROM mail WHERE receiver=?
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3-String,4-String

[insertMessage]
SQL1_1 = INSERT INTO messages (message, title, sender, receiver) VALUES (?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4
Number of Inputs = 4

[getMessages]
SQL1_1 = SELECT message, title, sender FROM messages WHERE receiver=?
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3-String,4-String

[deleteCrime]
SQL1_1 = DELETE FROM wanted WHERE suspectGUID=?;
SQL1_INPUTS = 1
Number of Inputs = 1

[insertCrime]
SQL1_1 = INSERT INTO wanted (suspectID, officerGUID, charges, status, evidence) VALUES (?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5
Number of Inputs = 5

[updateCrime]
SQL1_1 = UPDATE wanted SET suspectID, officerGUID, charges, status, evidence WHERE uid=?
SQL1_INPUTS = 1, 2, 3, 4, 5
Number of Inputs = 5

[getCrime]
SQL1_1 = SELECT caseID, officerGUID, charges, status, evidence FROM wanted WHERE suspectGUID=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3-String, 4-String, 5-String

[getCrimeType]
SQL1_1 = SELECT caseID, officerGUID, charges, status, evidence FROM wanted WHERE status=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3-String, 4-String, 5-String



;;[updateMayor]
;;SQL_1 = UPDATE mayor SET mayor=1 WHERE uid=?
;;SQL1_INPUTS = 1
;;Number of Inputs = 1

[update]
SQL_1 = UPDATE users SET ?=? WHERE uid=?
SQL1_INPUTS = 3, 1, 2
Number of Inputs = 3

[updateUsersValueString]
SQL1_1 = UPDATE users
SQL1_2 =    SET $CUSTOM_1$ = ?
SQL1_3 = WHERE uid = ?;
SQL1_INPUTS = 2, 1

Number of Inputs = 2
Number of Custom Inputs = 1

;;$CUSTOM_x$ allows you to insert dynamic text into an prepared statement.
;;Downside is the statement isn't cached + possible less secure. 

;;Note the order of passing inputs to extDB2 is important with custom inputs.
;; Its <inputs>:<custom_inputs>
;; So the inputs would be in this order _playerUID:_mapID:_value:_custom_1 

;;Also you can re-arrange the Input Value Order